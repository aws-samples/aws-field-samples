from typing import Annotated, Any, Dict, List, Literal, Union

from pydantic import Field, computed_field, field_validator

from converseagent.content import (
    BaseContentBlock,
    DocumentContentBlock,
    ImageContentBlock,
    TextContentBlock,
)
from converseagent.logging_utils.logger_config import setup_logger

logger = setup_logger(__name__)

ContentBlock = Annotated[
    Union[TextContentBlock, ImageContentBlock, DocumentContentBlock],
    Field(discriminator="type"),
]


class ToolUseContentBlock(BaseContentBlock):
    """Represents an Amazon Bedrock Runtime ToolUseBlock

    This content block contains the tool use information. The AssistantMessage
    received from the Converse API call will contain tool use information that is
    parsed and a ToolUseContentBlock is created automatically.

    Attributes:
        type (Literal["tool_use"]): The type identifier for the content block. The
            value is set to "tool_use".
        tool_use_id (str): The unique identifier for the tool use.
        tool_name (str): The name of the tool being used.
        tool_input (dict): The input provided to the tool.


    Example:
        ```
            tool_use_block = ToolUseContentBlock(
                tool_use_id="IDHERE",
                tool_name="tool_name",
                tool_input={"arg1": "value1"}
            )
        ```
    """

    type: Literal["tool_use"] = "tool_use"
    tool_use_id: str = Field(description="The unique identifier for the tool use")
    tool_name: str = Field(description="The name of the tool being used")
    tool_input: Dict = Field(description="The input provided to the tool")

    def format(self) -> Dict[str, Dict[str, Union[str, Dict[str, Any]]]]:
        """Formats the content block for Converse

        Returns:
            Dict[str, Dict[str, Union[str, Dict[str, Any]]]]: A dictionary containing:
                - toolUse: Dict that contains the tool use information
                    - toolUseId: The unique toolUse

        """
        return {
            "toolUse": {
                "toolUseId": self.tool_use_id,
                "name": self.tool_name,
                "input": self.tool_input,
            }
        }


class ToolResultContentBlock(BaseContentBlock):
    """Represents an Amazon Bedrock Runtime ToolResultBlock.

    This content block contains the tool result information. Tool outputs
    are parsed and placed into ToolResultContent Block.

    Attributes:
        type (Literal["tool_result"]): The type identifier for the content block.
            The value is set to "tool_result".
        tool_use_id (str): The unique identifier for the tool use block.
        tool_result_content (List[ContentBlock]): The list of ContentBlock for the tool
            result.

    """

    type: Literal["tool_result"] = "tool_result"
    tool_use_id: str
    tool_result_content: List[ContentBlock] = Field(default_factory=List)

    def format(self) -> Dict[str, Dict[str, Union[str, List[Dict]]]]:
        """Format the tool use content block for a specific format.

        Returns:
            Dict[str, Dict[str, Union[str, List[Dict]]]]: A dictionary containing:
                - toolResult: Dict containing the tool result
                    - toolUseId: The unique tool use Id generated by Converse
                    - content: List of converse formatted content blocks
        """
        return {
            "toolResult": {
                "toolUseId": self.tool_use_id,
                "content": [block.format() for block in self.tool_result_content],
            }
        }

    def append_content(self, block):
        """Appends the content block to the content list

        Args:
            block (BaseContentBlock): The block to be appended to the content list.
        """
        if isinstance(block, BaseContentBlock):
            self.tool_result_content.append(block)
        else:
            error_msg = f"Block: {block} must be of type BaseContentBlock"
            logger.error(error_msg)
            raise TypeError(error_msg)
